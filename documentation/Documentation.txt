PRECONDITIONAS

    Install Visual Studio Code:    https://code.visualstudio.com/
    Install Extension:   Python Extension Pack
    Install Python:   https://code.visualstudio.com/docs/python/python-tutorial or from  MicrosoftStore
    Useful Link:   https://learn.microsoft.com/en-us/windows/python/beginners



INITIAL SET UP

    1. Create virtual environment:   
            python -m venv .<environmentname>
    2. Activate virtual environment:   
            .<environmentname>/scripts/activate
    3. Check pip version:   
            python -m pip --version
    4. Upgrade pip version [optional]:   
            python -m pip install --upgrade pip
    5. Install required dependencies:   
            python -m pip install -r requirements.txt
    6. Print options in the terminal [optional]:   
            python manage.py
    7. Run project:   
            python manage.py runserver



PROJECT VS APPLICATION IN DJANGO

    An app is a web application that does something â€“ e.g., a blog system, a database of public records or a small poll app. 
    A project is a collection of configuration and apps for a particular website. 
    A project can contain multiple apps. An app can be in multiple projects.

    How to create project?   
    1. Create project:   
            python -m django startproject <projectname> .
    2. Migrate admin, auth, contenttypes and sessions:    
            python manage.py migrate
    3. Create admin user (super user):   
            python manage.py createsuperuser

    How to create app?
    1. Create application:   
            python manage.py startapp <appname>
    2. Include app in the project by adding it into 'INSTALLED_APPS' in project settings.py file
    3. Make migration (if you added some new modeles you want to be applied to DB):   
            python manage.py makemigrations <appname>
    4. Migrate app models into DB:   
            python manage.py migrate <appname>



USER AUTHENTICATION SYSTEM IN DJANGO

    Django comes with a user authentication system. 
    It handles user accounts, groups, permissions and cookie-based user sessions. 
    https://docs.djangoproject.com/en/4.2/topics/auth/

        This models has been created automaticaly
        when we created django-project BUT at that moment
        they are not applied to DB yet.
        With commands:
                python manage.py makemigrations
                python manage.py migrate
        tables will be included and migrated to the DB.

        EXAMPLE of auto generated django authentication system models could be found in here:
                documentation\autoGeneratedDjangoAuthenticationSystemModels.py
        which was created by running following command:
                python manage.py inspectdb > documentation\autoGeneratedDjangoAuthenticationSystemModels.py

    Create admin user (super user):   python manage.py createsuperuser



HOW TO INTEGRATE DJANGO APPLICATION WITH EXISTING DB

    In order to use an existing database in Django, you need to configure Django to use your DB & to have a model for each table.

    1. Configure Django to use the DB, i.e. in settings.py file you have to set up your DB.
            EXAMPLE:
                    Default DB when django project is created:
                        DATABASES = {
                            'default': {
                                'ENGINE': 'django.db.backends.sqlite3',
                                'NAME': BASE_DIR / 'db.sqlite3',
                            }
                        }
                    Custom DB set up:
                        DATABASES = {
                            'default': {
                                'ENGINE': 'django.db.backends.postgresql',
                                'NAME': 'mydatabase',
                                'USER': 'mydatabaseuser',
                                'PASSWORD': 'mypassword',
                                'HOST': '127.0.0.1',
                                'PORT': '5432'
                            }
                        }
            For more details see --> https://docs.djangoproject.com/en/4.1/ref/settings/#databases

    2. Generate models for existing tables.

            Run django-admin command that inspects your database and outputs Python code for each model.
                python manage.py inspectdb > <projectname>\models.py

                The output of this command might be not 100% accurate, 
                so you need to have a look at the generated models and adjust them
                according the instructions you will get on top of generated file.

            Generate the initial migrations for the existing tables & tables required by Django to function properly
                python manage.py makemigrations
                python manage.py migrate --fake-initial
            
            For more details see https://djangoadventures.com/how-to-integrate-django-with-existing-database/  



USEFULL COMMANDS

    ~ Print all available django commands in the terminal:   
            python manage.py
    ~ Create new migrations based on the changes you have made to your models:   
            python manage.py makemigrations
    ~ Apply migrations: 
            python manage.py migrate
    ~ Create new migrations based on the changes you have made to your model in specific <appname>:
            python manage.py makemigrations <appname>
    ~ Name the migration(s) with meaningful name instead of a generated one:
            python manage.py makemigrations --name <migrationname> <appname>
    ~ Apply specific <appname> migrations:
            python manage.py migrate <appname>
    ~ Inspect DB and prints it in the terminal:
            python manage.py inspectdb
    ~ Inspect DB and generate file models.py with Python code for each model:
            python manage.py inspectdb > models.py
    ~ Open a terminal with the Django settings already imported and allows you to work directly from the root folder of a Django project. 
            Example:
                python manage.py shell
                from <appname>.models import MyModel
                obj = MyModel(id=1, name='objName', ...rest of the required fields)
                obj.save()
    ~ Check the whole project for errors.
            python manage.py check
    
    ~ Output installed packages in requirements format for documenting the versions of installed packages.
        pip freeze > documentation\freezedCurrentEnv.txt

    ~ Collect all your static files from each of your project/app folders you specified in settings.py, and copies them into STATIC_ROOT.
        python manage.py collectstatic

        ps. You need to re-run this command whenever you want to publish new versions of your static files.
        More info --> https://help.pythonanywhere.com/pages/DjangoStaticFiles/
